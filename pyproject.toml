[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "phoebus-pyolog"
authors = [
    { name = "Phoebus PyOlog Contributors", email = "asligar@bnl.gov" },
]
description = "Python client for Phoebus Olog logbook service"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]
dependencies = [
    "requests>=2.28.0",
    "charset-normalizer>=3.0.0",
]
license = { text = "Apache-2.0" }
keywords = ["phoebus", "olog", "logbook", "epics", "controls"]

[project.urls]
Documentation = "https://github.com/sligara7/phoebus-pyolog"
Homepage = "https://github.com/sligara7/phoebus-pyolog"
Repository = "https://github.com/sligara7/phoebus-pyolog.git"
Issues = "https://github.com/sligara7/phoebus-pyolog/issues"

[project.optional-dependencies]
test = [
    "pytest>=6.0.0",
    "pytest-cov",
    "pytest-mock",
]
dev = [
    "phoebus-pyolog[test]",
    "pre-commit",
    "ruff",
    "mypy",
    "bandit[toml]",
    "safety",
    "pip-audit",
    "nox",
    "build",
    "twine",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
]
toml = [
    "tomli>=1.2.0; python_version<'3.11'",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/pyolog"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = ["tests"]
log_cli_level = "INFO"
filterwarnings = [
    "error",
    "ignore::requests.packages.urllib3.exceptions.InsecureRequestWarning",
    "ignore::requests.RequestsDependencyWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "server_dependent: marks tests that depend on server configuration",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E", "F", "W", # flake8
    "B",           # flake8-bugbear
    "I",           # isort
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "EM",          # flake8-errmsg
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "G",           # flake8-logging-format
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "EXE",         # flake8-executable
    "NPY",         # NumPy specific rules
    "PD",          # pandas-vet
]
ignore = [
    "PLR09",    # Too many X
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]

# MyPy configuration
[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
warn_unreachable = true
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true

[[tool.mypy.overrides]]
module = ["requests.*"]
ignore_missing_imports = true
